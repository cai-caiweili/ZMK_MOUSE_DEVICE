#include <behaviors.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define INPUT_EV_KEY 0x01               /**< Key event */
#define INPUT_EV_REL 0x02               /**< Relative coordinate event */
#define INPUT_EV_ABS 0x03               /**< Absolute coordinate event */
#define INPUT_EV_MSC 0x04               /**< Miscellaneous event */
#define INPUT_EV_VENDOR_START 0xf0      /**< Vendor specific event start */
#define INPUT_EV_VENDOR_STOP 0xff       /**< Vendor specific event stop */

#define INPUT_REL_X 0x00                /**< Relative X coordinate */
#define INPUT_REL_Y 0x01                /**< Relative Y coordinate */
#define INPUT_REL_WHEEL 0x08            /**< Relative wheel coordinate */
#define INPUT_REL_HWHEEL 0x06           /**< Relative horizontal wheel coordinate */
#define INPUT_REL_MISC 0x09             /**< Relative misc coordinate */

/{
  trackball_listener { 
    compatible = "zmk,input-listener";
    device = <&pd1>;
  };
};

/{
  /* auto toggle mouse key layer */
  trackball_peripheral_auto_mouse_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&pd1>;
        layers = <0 1>;
		evt-type = <INPUT_EV_REL>;
		x-input-code = <INPUT_REL_X>;
		y-input-code = <INPUT_REL_WHEEL>;
		scale-multiplier = <1>;
		scale-divisor = <1>;
        bindings = <&ib_tog_layer 5>;
   };

   /* input config for mouse scroll mode on momentary mouse scoll layer */
   trackball_peripheral_snipe_listener {
           compatible = "zmk,input-behavior-listener";
           device = <&pd1>;
           layers = <2>;
           evt-type = <INPUT_EV_REL>;
           
           /* slienting x-axis with alt event code */
           x-input-code = <INPUT_REL_HWHEEL>;
           y-input-code = <INPUT_REL_WHEEL>;   
           /* invent scrolling direction */
           y-invert;
           /* align to CCW 45 degree */
           rotate-deg = <315>;
           /* NOTE 1: This settings do not compitable with y-invert and x-invert */
           /* NOTE 2: Floating point computation requires alot of ram. */
           /*         This feature will cuase stackove flow with CONFIG_ZMK_USB_LOGGING=y *   
           /* bind a behavior to down scaling input value to (1/8) */
           /* NOTE: This behavior is different to scale-divisor. */
           /*       The delta value is accumlated until result >= 1 after cast. */
           /*       The scrolling is preented in hi-res and allow precise scrolling */
           bindings = <&ib_wheel_scaler 1 8>;
   };

   /* adjust cooldown waiting period for mouse key layer (MSK) after activated */
   ib_tog_layer: ib_tog_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <2000>;
    };

    /* define a resolution down scaler only for INPUT_REL_WHEEL */
    ib_wheel_scaler: ib_wheel_scaler {
            compatible = "zmk,input-behavior-scaler";
            #binding-cells = <2>;
            evt-type = <INPUT_EV_REL>;
            input-code = <INPUT_REL_WHEEL>;
    };
};

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
};

&sk {
    release-after-ms = <2000>;
    quick-release;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        left_bkt {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <2 3>;
            timeout-ms = <50>;
        };

        right_bkt {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <7 6>;
            timeout-ms = <50>;
        };

        left_par {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <12 13>;
            timeout-ms = <50>;
        };

        right_par {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <16 17>;
            timeout-ms = <50>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <22 23>;
            timeout-ms = <50>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <26 27>;
            timeout-ms = <50>;
        };

        bac {
            bindings = <&kp BACKSLASH>;
            key-positions = <5 6>;
            timeout-ms = <50>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <3 4>;
            timeout-ms = <50>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            flavor = "tap-preferred";
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            label = "LTQ";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
        };

        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <135>;
            quick-tap-ms = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            label = "Base";
            bindings = <
&kp Q           &kp W           &kp E               &kp R             &kp T                     &kp Y  &kp U              &kp I                &kp O                    &hm LG(LS(V)) P
&hm LEFT_GUI A  &hm LEFT_ALT S  &hm LEFT_CONTROL D  &hm LEFT_SHIFT F  &kp G                     &kp H  &hm RIGHT_SHIFT J  &hm RIGHT_CONTROL K  &hm RIGHT_ALT L          &as COLON SEMICOLON
&kp Z           &kp X           &kp C               &kp V             &kp B                     &kp N  &kp M              &as LESS_THAN COMMA  &as GREATER_THAN PERIOD  &as QUESTION SLASH
                                                    &ltq 1 BACKSPACE  &ltq 3 TAB  &ltq 2 SPACE         &ltq 2 SPACE       &ltq 3 ENTER         &ltq 1 DELETE
            >;
        };

        layer_1 {
            label = "Lower";
            bindings = <
&trans  &trans    &kp UP        &kp EQUAL  &trans                     &bt BT_SEL 0          &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &kp LEFT  &kp DOWN      &kp RIGHT  &kp C_VOLUME_UP            &kp C_BRIGHTNESS_INC  &bt BT_CLR    &trans        &trans        &trans
&trans  &trans    &out OUT_TOG  &trans     &kp C_VOLUME_DOWN          &kp C_BRI_DEC         &trans        &trans        &trans        &trans
                                &trans     &trans             &trans                        &trans        &trans        &trans
            >;
        };

        layer_2 {
            label = "Raise";
            bindings = <
&kp EXCL      &kp AT        &kp HASH  &kp DLLR  &kp PRCNT               &kp CARET  &kp AMPS         &kp ASTERISK  &kp LPAR                        &kp RPAR
&kp ESCAPE    &kp CAPSLOCK  &kp HOME  &kp END   &kp UNDERSCORE          &kp MINUS  &kp RIGHT_SHIFT  &kp PAGE_UP   &kp PAGE_DOWN                   &as PIPE NON_US_BACKSLASH
&out OUT_TOG  &bootloader   &trans    &trans    &kp TILDE               &kp GRAVE  &as PLUS EQUAL   &kp SQT       &as DOUBLE_QUOTES SINGLE_QUOTE  &kp DELETE
                                      &trans    &trans          &trans             &trans           &trans        &trans
            >;
        };

        layer_3 {
            label = "shortcut";
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5              &kp NUMBER_6       &kp NUMBER_7     &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0
&kp LG(A)     &kp LG(S)     &kp LG(D)     &kp LG(F)     &kp LEFT_BRACKET          &kp RIGHT_BRACKET  &kp RIGHT_SHIFT  &kp F6        &kp F7        &kp F8
&kp LG(Z)     &kp LG(X)     &kp LG(C)     &kp LG(V)     &kp LEFT_BRACE            &kp RIGHT_BRACE    &kp F1           &kp F2        &kp F3        &kp F4
                                          &trans        &trans            &trans                     &trans           &trans        &trans
            >;
        };

        Game {
            label = "Game";
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5          &kp Y   &kp U   &kp I   &kp H   &kp J
&kp L         &kp O         &kp Y         &kp K         &kp G                 &trans  &trans  &trans  &trans  &trans
&none         &to 0         &none         &kp NUMBER_6  &kp NUMBER_7          &trans  &trans  &trans  &trans  &trans
                                          &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };

        Mouse {
            bindings = <
&trans  &trans          &msc SCRL_UP    &trans           &trans                &trans  &trans  &trans  &trans  &trans
&trans  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_RIGHT  &trans                &trans  &mkp LCLK        &mkp MCLK  &mkp RCLK  &trans
&trans  &trans          &trans          &trans           &trans                &trans  &trans  &trans  &trans  &trans
                                        &mkp LCLK        &mkp MCLK  &mkp RCLK          &trans  &trans  &trans
            >;
        };
    };
};